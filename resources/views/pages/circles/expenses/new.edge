@!layout("layouts/admin")
@set("title", title ?? "Nuova Spesa")

@section("sectionBar")
  @!component("components/section-bar",{
    title: circle.slug,
  })
@end

@section("body")
<form class="h-full w-full flex flex-col gap-4" method="post" action="{{route('v1.protected.circles.circle.expenses.new.create', [circle.slug])}}" x-data="newExpenseData">

  @card({
    background: "transparent"
  })

    <div class="flex flex-col md:flex-row gap-4">

      @!form.inputRow({
        label: "Nome spesa",
        name: "name",
        placeholder: "Bolletta",
        required: true,
        xModel: "expenseData.name"
      })

      @!form.select({
        label: "Categoria",
        placeholder: "Seleziona una categoria",
        optionValueKey: "id",
        optionLabelKey: "name",
        options: categories,
        name: "category",
        xModel: "expenseData.expense_category_id"
      })

    </div>

    <div class="flex flex-col md:flex-row gap-4">

      @!form.inputRow({
        label: "Ammontare spesa",
        name: "ammount",
        type: "number",
        placeholder: "Ammontare (senza valuta)",
        xModel: "expenseData.ammount"
      })

      @!form.select({
        label: "Tipologia",
        placeholder: "Seleziona una tipologia",
        optionValueKey: "id",
        optionLabelKey: "name",
        xModel: "expenseData.type",
        options: [{
            id: "loss",
            name : "Spesa"
          },{
            id: "gain",
            name : "Incasso"
          }],
        name: "type"
      })

    </div>

    <div class="flex h-full max-h-[300px]">
      @!form.textarea({
        name: "description",
        placeholder: "Inserisci una piccola descrizione",
        label: "Descrizione",
        xModel: "expenseData.description"
      })
    </div>

    <div class="flex flex-col border border-secondary-200 rounded-xl p-4 gap-4">

      <div class="flex flex-col-reverse md:flex-row gap-4">

      <div class="flex flex-1 gap-4 flex-wrap">
        <template x-for="partecipant in partecipants">
          <div class="bg-primary-100 ring-black rounded-full flex items-center justify-center gap-4 cursor-pointer px-4 " @click.prevent="() => togglePartecipant(partecipant)" :class="partecipant.selected && 'ring-2'" >
            <span class="material-symbols-outlined">
              account_circle
            </span>
            <span x-text="partecipant.fullName">
            </span>
            </div>
          </template>
      </div>


        <p class="flex-row items-center pt-6">Aggiungi un membro alla tua cerchia inserendo la sua email (se l'utente non è registrato/a verrà inviata una mail)</p>

      </div>


    </div>
    

  @end


  <div class="flex gap-4">
    <a href="/admin/messages/templates"
      class="px-4 py-2 flex-1 text-black border border-secondary rounded-lg hover:bg-seconary flex justify-center gap-2"
      type="submit">
      <span class="material-symbols-outlined">style</span>
      Templates
    </a>

    @!form.button({
      label: "Nuova Spesa",
      icon: "calculate",
      type: "submit",
      xClick: "submitExpense"
    })

  </div>
</form>
@end

@section("scripts")
@super

<script>
  console.log("{{ route('v1.protected.circles.circle.expenses.new.create', [circle.slug]) }}")

  document.addEventListener("alpine:init", function () {
    Alpine.data("newExpenseData", () => ({
      partecipants: JSON.parse('{{{membersString}}}').map(el => ({...el, selected: false})) ?? [],
      route: "{{ route('v1.protected.circles.circle.expenses.new.create', [circle.slug]) }}",
      expenseData: {
        
      },
      togglePartecipant(partecipant) {
        partecipant.selected = !partecipant.selected
      },
      submitExpense(e){

        e.preventDefault()
        // fetch(this.route)
        fetch(this.route, {
          method: "POST",
          body: JSON.stringify({
            partecipants: this.partecipants.filter(partecipant => partecipant.selected),
            ...this.expenseData
          }),
          headers: {
            'Content-Type': "application/json"
          }
        }).then(res => res.json()).then(data => console.log(data))

      }
    //   init: () => console.log(this)
    }))

    
  })

  console.log()
  
</script>

@end
